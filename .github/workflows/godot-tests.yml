name: "godot gut test"
on: push

jobs:
  execute-gut:
    name: Run GUT tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: print secrets
        run: |
          printf 'extends Node\nconst API_KEY := \"%s\"' $DEV_ENV_FILE > UI/Firebase/PrivateKey.gd
          cat UI/Firebase/PrivateKey.gd
        shell: bash
        env:
          DEV_ENV_FILE : ${{secrets.FIREBASE_API_KEY}}
          
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: DEV_ENV_FILE
          path: UI/Firebase/PrivateKey.gd
      - name: Check out personal godot-tester repository
        uses: actions/checkout@v3
        with:
          repository: db0/godot-tester
          path: ./.github/actions/godot-tester
      # Runs a single command using the runners shell
      - name: âš™ Run Tests
        uses: ./.github/actions/godot-tester
        with:
          version: "3.4.4"
          # the type of release of godot that the tests should be run with
          release_type: "rc2"
          is-mono: "true"
          # the folder with your projects.godot file in it
          path: ""
          # how long to spend importing assets before tests are run
          import-time: "120"
          # how long tests can run in seconds
          test-timeout: "45"
          # the ratio of tests that must pass for this action to pass
          # e.g. 0.6 means 60% of your tests must pass
          minimum-pass: "0.5"
          # the directory containing Gut tests
          test-dir: "res://Test/Unit"
          # instead of running GUT's command line tool, you can run a GUT test scene if you have one
          # set up correctly
          # helps enable things like mouse mocking and current scene to work without any extra coding steps
          # set up a scene like in this repo --> located at /tester/test/alt_mode/tests.tscn
          # set up a script like in this repo --> located at /tester/test/alt_mode/cli_plugin.gd
          # ensure cli_plugin.gd inherits from the GUT plugin
          # and exits on test completion
          # ensure tests.tscn uses your modified plugin script and check yes for run on load
          # uses relative path from your godot project directory
          direct-scene: "Test/GUT.tscn" 
          # default is false, set true to count asserts instead of tests
          assert-check: "false" 
          # not checked by default, set to a number to limit the 
          # maximum amount of failed tests for a passing test suite
          max-fails: 3  
          # to ensure all SCRIPT ERRORs dont contribute to your failure rate        
          ignore-errors: "true" 
